import numpy as np

def dipole_moment(r, N, I, mu, L):
    Nd = (4*(np.log(L/r) - 1))/((L/r)**2 - 4*(np.log(L/r)))
    return np.pi * (r**2) * N * I * (1 + ((mu - 1)/(1 + ((mu - 1) * Nd))))
     
def rigid_body_torque(mass, angle, diameter, time):
    # In: mass in kg, angle of motion in degrees, diameter of rotating body in m, time to rotate in s
    # Out: a torque to induce motion in specified time in Nm 

    d = diameter * 3.14 * (angle / 360)
    v = d / time 
    r = diameter/2
    a = v/(r**2)
    F = mass * a
    torque = F * d
    return torque

def core_mass(density, L, r):
    core_volume = (r **2) * L * np.pi
    core_mass = core_volume * density  
    return core_mass

# MISSION MAGNETORQUER CONSTRAINTS
max_current = 0.1 #maximum allowed through 30 AWG wire in A
permeability = 10000 #relative permeability of permalloy
core_radius = 0.005 #m 
core_length = 0.08 #m
core_density = 8700 #kg/m3

diameter_wire = 0.000254 #copper wire 30 AWG in m
layers = 30
number_turns = round(core_length / diameter_wire) * layers

satellite_mass = 4 #kg
satellite_length = 0.3 #m
num_orbits = 30

turning_angle = 180 #degrees
convergence_time = num_orbits * 5400 #seconds


print("Number of turns: " + str(number_turns))
print("Torque needed to move satellite: " + f"{rigid_body_torque(satellite_mass, turning_angle, satellite_length, convergence_time):.5f}" + " Nm")

dipole = dipole_moment(core_radius, number_turns, max_current, permeability, core_length)
print("Dipole generated by magnetorquer design: " + str(round(dipole, 5)) + " Am2")

earth_bfield_equator = 0.000026 #Tesla
earth_bfield_northpole = 0.000048 #Tesla
torque_equator = dipole * earth_bfield_equator 
torque_northpole = dipole * earth_bfield_northpole
print("Torque generated: " + f"{torque_equator:.5f}" + " Nm to " +  f"{torque_northpole:.5f}" + " Nm")
